// Arrays of unencoded and encoded characters

// & gets escaped and unescaped always
var amp = [["&", "&amp;"]];

// table for unicode sumbols
var unicode = [
    ["<", "&lt;"],
    [">", "&gt;"],
    ['"', "&quot;"],
    ["'", "&#39;"]
];

// table for popular symbols
var popular = unicode.concat([
    ["©", "&copy;"],
    ["®", "&reg;"],
    ["™", "&trade;"],
    ["¢", "&cent;"],
    ["£", "&pound;"],
    ["¤", "&curren;"],
    ["¥", "&yen;"],
    ["€", "&euro;"]
]);

// table for math symbols
var math = [
    ["−", "&minus;"],
    ["×", "&times;"],
    ["÷", "&divide;"],
    ["√", "&radic;"],
    ["∝", "&prop;"],
    ["∞", "&infin;"],
    ["∗", "&lowast;"],
    ["∠", "&ang;"],
    ["°", "&deg;"],
    ["±", "&plusmn;"],
    ["¬", "&not;"],
    ["<", "&lt;"],
    [">", "&gt;"],
    ["≤", "&le;"],
    ["≥", "&ge;"],
    ["∫", "&int;"],
    ["∴", "&there4;"],
    ["∼", "&sim;"],
    ["≅", "&cong;"],
    ["≈", "&asymp;"],
    ["≠", "&ne;"],
    ["≡", "&equiv;"],
    ["∩", "&cap;"],
    ["∪", "&cup;"],
    ["⊂", "&sub;"],
    ["⊃", "&sup;"],
    ["⊄", "&nsub;"],
    ["⊆", "&sube;"],
    ["⊇", "&supe;"],
    ["⊕", "&oplus;"],
    ["⊗", "&otimes;"],
    ["⊥", "&perp;"],
    ["ƒ", "&fnof;"],
    ["¹", "&sup1;"],
    ["²", "&sup2;"],
    ["³", "&sup3;"],
    ["¼", "&frac14;"],
    ["½", "&frac12;"],
    ["¾", "&frac34;"],
    ["⋅", "&sdot;"],
    ["‰", "&permil;"],
    ["∧", "&and;"],
    ["∨", "&or;"],
    ["∀", "&forall;"],
    ["∂", "&part;"],
    ["∃", "&exist;"],
    ["∅", "&empty;"],
    ["∇", "&nabla;"],
    ["∈", "&isin;"],
    ["∉", "&notin;"],
    ["∋", "&ni;"],
    ["∏", "&prod;"],
    ["∑", "&sum;"]
];

// 
var full = popular.concat(math);

/**
 * Replaces special characters in HTML string.
 * List: https://github.com/vpukhanov/node-escapist/wiki/Characters-listing
 *
 * @param {String} html_string
 * @param {Array} symbols
 * @return {String}
 */
function replace(html_string, symbols, from, to)
{
    for (i = 0; i < symbols.length; i++) {
	var re = new RegExp(symbols[i][from], 'g');
	html_string = html_string.replace(re, symbols[i][to]);
    }

    return html_string;
}

/**
 * Calls replace() to escape characters
 *
 * @param {String} html_string
 * @param {Array} symbols
 * @return {String}
 */
function escape(html_string, symbols) {
    return replace(html_string, amp.concat(symbols), 0, 1);
}

/**
 * Calls replace() to unescape characters
 *
 * @param {String} html_string
 * @param {Array} symbols
 * @return {String}
 */
function unescape(html_string, symbols) {
    return replace(html_string, symbols.concat(amp), 1, 0);
}

/**
 * Exports for module
 * 1. Unicode symbols escaper/unescaper
 * 2. Popular symbols escaper/unescaper
 * 3. Math symbols escaper/unescaper
 * 4. Full escaper/unescaper
 */
module.exports = {
    unicode: {
	escape: function(html_string) { return escape(html_string, unicode); },
	unescape: function(html_string) { return unescape(html_string, unicode); }
    },
    popular: {
	escape: function(html_string) { return escape(html_string, popular); },
	unescape: function(html_string) { return unescape(html_string, popular); }
    },
    math: {
	escape: function(html_string) { return escape(html_string, math); },
	unescape: function(html_string) { return unescape(html_string, math); }
    },

    escape: function(html_string) { return escape(html_string, full); },
    unescape: function(html_string) { return unescape(html_string, full); }
};





