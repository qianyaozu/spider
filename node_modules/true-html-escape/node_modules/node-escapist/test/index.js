var escapist = require('../index');
var should = require('chai').should();

var e_uni = escapist.unicode,
    e_pop = escapist.popular,
    e_mat = escapist.math;

describe('#unicode' , function() {
    var escape_string = "! \" # $ % & ' ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~";
    var escaped_string = "! &quot; # $ % &amp; &#39; ( ) * + , - . / 0 1 2 3 4 5 6 7 8 9 : ; &lt; = &gt; ? @ A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ \ ] ^ _ ` a b c d e f g h i j k l m n o p q r s t u v w x y z { | } ~";

    it('escapes unicode string', function() {
	e_uni.escape(escape_string).should.equal(escaped_string);
    });

    it('unescapes unicode string', function() {
	e_uni.unescape(escaped_string).should.equal(escape_string);
    });
});

describe('#popular', function() {
    var escape_string = "©,&copy; ®,&reg; ™,&trade; ¢,&cent; £,&pound; ¤,&curren; ¥,&yen; €,&euro;";
    var escaped_string = "&copy;,&amp;copy; &reg;,&amp;reg; &trade;,&amp;trade; &cent;,&amp;cent; &pound;,&amp;pound; &curren;,&amp;curren; &yen;,&amp;yen; &euro;,&amp;euro;";

    it('escapes popular string', function() {
	e_pop.escape(escape_string).should.equal(escaped_string);
    });

    it('unescapes popular string', function() {
	e_pop.unescape(escaped_string).should.equal(escape_string);
    });
});

describe('#math', function() {
    var escape_string = "−,&minus; ×,&times; ÷,&divide; √,&radic; ∝,&prop; ∞,&infin; ∗,&lowast; ∠,&ang; °,&deg; ±,&plusmn; ¬,&not; <,&lt; >,&gt; ≤,&le; ≥,&ge; ∫,&int; ∴,&there4; ∼,&sim; ≅,&cong; ≈,&asymp; ≠,&ne; ≡,&equiv; ∩,&cap; ∪,&cup; ⊂,&sub; ⊃,&sup; ⊄,&nsub; ⊆,&sube; ⊇,&supe; ⊕,&oplus; ⊗,&otimes; ⊥,&perp; ƒ,&fnof; ¹,&sup1; ²,&sup2; ³,&sup3; ¼,&frac14; ½,&frac12; ¾,&frac34; ⋅,&sdot; ‰,&permil; ∧,&and; ∨,&or; ∀,&forall; ∂,&part; ∃,&exist; ∅,&empty; ∇,&nabla; ∈,&isin; ∉,&notin; ∋,&ni; ∏,&prod; ∑,&sum;";
    var escaped_string = "&minus;,&amp;minus; &times;,&amp;times; &divide;,&amp;divide; &radic;,&amp;radic; &prop;,&amp;prop; &infin;,&amp;infin; &lowast;,&amp;lowast; &ang;,&amp;ang; &deg;,&amp;deg; &plusmn;,&amp;plusmn; &not;,&amp;not; &lt;,&amp;lt; &gt;,&amp;gt; &le;,&amp;le; &ge;,&amp;ge; &int;,&amp;int; &there4;,&amp;there4; &sim;,&amp;sim; &cong;,&amp;cong; &asymp;,&amp;asymp; &ne;,&amp;ne; &equiv;,&amp;equiv; &cap;,&amp;cap; &cup;,&amp;cup; &sub;,&amp;sub; &sup;,&amp;sup; &nsub;,&amp;nsub; &sube;,&amp;sube; &supe;,&amp;supe; &oplus;,&amp;oplus; &otimes;,&amp;otimes; &perp;,&amp;perp; &fnof;,&amp;fnof; &sup1;,&amp;sup1; &sup2;,&amp;sup2; &sup3;,&amp;sup3; &frac14;,&amp;frac14; &frac12;,&amp;frac12; &frac34;,&amp;frac34; &sdot;,&amp;sdot; &permil;,&amp;permil; &and;,&amp;and; &or;,&amp;or; &forall;,&amp;forall; &part;,&amp;part; &exist;,&amp;exist; &empty;,&amp;empty; &nabla;,&amp;nabla; &isin;,&amp;isin; &notin;,&amp;notin; &ni;,&amp;ni; &prod;,&amp;prod; &sum;,&amp;sum;";

    it('escapes math string', function() {
	e_mat.escape(escape_string).should.equal(escaped_string);
    });

    it('unescapes math string', function() {
	e_mat.unescape(escaped_string).should.equal(escape_string);
    });
});
